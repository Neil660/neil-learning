<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.neil.mybatis.dao.datasourcesone.OneDefaultMapper">
    <!-- 1、缓存 -->
    <!--开启全局的二级缓存：基于命名空间，会话关闭也会存储-->
    <!--
        LRU – 最近最少使用：移除最长时间不被使用的对象。
        FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
        SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。
        WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。
    -->
    <!--<cache eviction="FIFO" flushInterval="60000" size="512" readOnly="false"/>-->

    <!-- 2、普通语法 -->
    <insert id="addTestTable" parameterType="com.neil.mybatis.model.TestTable">
        insert into test_table(id, action, name) values (#{id}, #{action}, #{name})
    </insert>

    <!-- 3、使用MAP传参 -->
    <!-- 使用MAP时，tableId是key -->
    <insert id="addTestTable2">
        insert into test_table(id, action, name) values (#{tableId}, #{tableAction}, #{tableName})
    </insert>

    <!-- 4、其他参数含义 -->
    <!--
        flushCache=true:本地缓存和二级缓存被清空
        useCache=true:致本条语句的结果被二级缓存缓存起来
        timeout:在抛出异常之前，驱动程序等待数据库返回请求结果的秒数
        fetchSize:驱动的建议值，尝试让驱动程序每次批量返回的结果行数等于这个设置值
        statementType:会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED
        resultSetType:FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT（等价于 unset） 中的一个，默认值为 unset （依赖数据库驱动）
        resultOrdered=true:假设结果集以正确顺序（排序后）执行映射，当返回新的主结果行时，将不再发生对以前结果行的引用
        resultSets:将列出语句执行后返回的结果集并赋予每个结果集一个名称，多个名称之间以逗号分隔
    -->
    <select id="getTestTableById" parameterType="int" resultType="com.neil.mybatis.model.TestTable" flushCache="true">
        select * from test_table where id = #{id}
    </select>

    <!-- 5、基本类型的parameterType可以省略 -->
    <select id="getTestTableByName" resultType="com.neil.mybatis.model.TestTable">
        select * from test_table where name like "%"#{name}"%"
    </select>

    <!-- 6、返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型 -->
    <select id="getTestTable" resultType="com.neil.mybatis.model.TestTable">
        select * from test_table
    </select>

    <!-- 7、动态SQL -->
    <!--collection：
        单参且是一个List，collection属性值为list
        单参且是一个array数组候，collection的属性值为array
        多参封装成Map，取对应值的key
        index：每次迭代到的位置
        item:每次迭代到时的别名-->
    <select id="dynamicSqlQuery" resultType="com.neil.mybatis.model.TestTable">
        select * from test_table
        <where>
            <if test="action != null and action != ''">
                action like "%"#{action}"%"
            </if>

            <if test="name != null">
                <choose>
                    <when test="type == 1">
                        and name like #{name}"%"
                    </when>
                    <when test="type == 2">
                        and name like "%"#{name}
                    </when>
                    <otherwise>
                        and name like "%"#{name}"%"
                    </otherwise>
                </choose>
            </if>

            <foreach item="item" index="index" collection="list" open="id in (" separator="," close=")" nullable="true">
                #{item}
            </foreach>
        </where>
    </select>

</mapper>